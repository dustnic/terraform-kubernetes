- name: Create the /var/lib/kubernetes and /etc/kubernetes/config folder
  file:
    path: "{{item}}"
    state: directory
  become: yes
  with_items:
    - /etc/kubernetes/config
    - /var/lib/kubernetes
  tags: controller

- name: Extract PKI data
  unarchive:
    src: "{{ playbook_dir }}/pki/controller-pki.tgz"
    dest: /var/lib/kubernetes
    list_files: yes
  become: yes
  tags: controller

- name: Template kubeconfig generator scripts
  template:
    src: "templates/{{item}}.kubeconfig-generator.sh"
    dest: "{{item}}.kubeconfig-generator.sh"
  become: yes
  with_items:
    # - kube-scheduler
    # - kube-controller-manager
    # - kube-proxy
    - admin
  tags: controller

- name: Execute kubeconfig generator scripts
  shell: "bash {{item}}.kubeconfig-generator.sh"
  with_items:
    # - kube-scheduler
    # - kube-controller-manager
    # - kube-proxy
    - admin
  become: yes
  tags: controller

# - name: Generate a random encryption secret
#   shell: head -c 32 /dev/urandom | base64
#   register: secret
#   delegate_to: "{{ groups.masters[0] }}"
#   run_once: yes
#   tags: controller

- name: Generate the encryption config file
  template:
    src: templates/encryption-config.yml
    dest: /var/lib/kubernetes/encryption-config.yml
  become: yes
  tags: controller

- name: Download and install the kubernetes controller binaries
  get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/v{{kubernetes_version}}/bin/linux/amd64/{{item}}" 
    dest: "/usr/local/bin/{{item}}"
    mode: 0700
  become: yes
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  tags: controller

- name: Generate services configuration
  template:
    src: "templates/{{item}}.service"
    dest: "/etc/systemd/system/{{item}}.service"
  with_items:
    - kube-apiserver
    - kube-scheduler
    - kube-controller-manager
  become: yes
  tags: controller

- name: Generate the Kubernetes scheduler configuration
  template:
    src: templates/kube-scheduler.yaml
    dest: /etc/kubernetes/config/kube-scheduler.yaml
  become: yes
  tags: controller

- name: Enable and start Kubernetes services
  systemd:
    name: "{{item}}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  become: yes
  tags: controller

- name: Configure nginx for KubeAPI healthcheck (pre-installed at bootstrap)
  template:
    src: templates/kubernetes.default.svc.cluster.local.conf
    dest: /etc/nginx/conf.d/kubernetes.default.svc.cluster.local.conf
  become: yes
  tags: 
    - controller
    - healthcheck

- name: Restart Nginx
  template:
    src: templates/kubernetes.default.svc.cluster.local.conf
    dest: /etc/nginx/conf.d/kubernetes.default.svc.cluster.local.conf
  become: yes
  notify: Restart Nginx
  tags: 
    - controller
    - healthcheck